// The file is modified from https://github.com/golang/tools/blob/master/cmd/stringer/stringer.go
package main // import "github.com/shuoli84/fielder"

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/importer"
	"go/parser"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"reflect"
)


var (
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
	tagName = flag.String("tagName", "fielder", "tagname which used to parse the field_name, json or bson to reuse")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_fielder.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tfielder [flags] -type T -tag TagName [directory]\n")
	fmt.Fprintf(os.Stderr, "\tfielder [flags] -type T -tagName TagName files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "For more information, see:\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("fielder: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var (
		dir string
		g   Generator
	)
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.parsePackageDir(args[0])
	} else {
		dir = filepath.Dir(args[0])
		g.parsePackageFiles(args)
	}

	// Print the header and package clause.
	g.Printf("// Code generated by \"github.com/shuoli84/fielder %s\"; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf("import \"fmt\"\n") // Used by all methods.

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_fielder.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string  // Name of the struct type.
	values   []Value // Accumulator for constant values of that type.
}

type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(directory string) {
	pkg, err := build.Default.ImportDir(directory, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", directory, err)
	}
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	// TODO: Need to think about constants in test files. Maybe write type_string_test.go
	// in a separate pass? For later.
	// names = append(names, pkg.TestGoFiles...) // These are also in the "foo" package.
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(directory, names)
	g.parsePackage(directory, names, nil)
}

// parsePackageFiles parses the package occupying the named files.
func (g *Generator) parsePackageFiles(names []string) {
	g.parsePackage(".", names, nil)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(directory string, names []string, text interface{}) {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		parsedFile, err := parser.ParseFile(fs, name, text, 0)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", name, err)
		}
		astFiles = append(astFiles, parsedFile)
		files = append(files, &File{
			file: parsedFile,
			pkg:  g.pkg,
		})
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}
	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = directory
	// Type check the package.
	g.pkg.check(fs, astFiles)
}

// check type-checks the package. The package must be OK to proceed.
func (pkg *Package) check(fs *token.FileSet, astFiles []*ast.File) {
	pkg.defs = make(map[*ast.Ident]types.Object)
	config := types.Config{Importer: importer.Default(), FakeImportC: true}
	info := &types.Info{
		Defs: pkg.defs,
	}
	typesPkg, err := config.Check(pkg.dir, fs, astFiles, info)
	if err != nil {
		log.Fatalf("checking package: %s", err)
	}
	pkg.typesPkg = typesPkg
}

// generate produces the Fielder method for the named type.
func (g *Generator) generate(typeName string) {
	values := make([]Value, 0, 100)
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		file.values = nil
		if file.file != nil {
			ast.Inspect(file.file, file.genDecl)
			values = append(values, file.values...)
		}
	}

	g.build(typeName, values)
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

type Field struct {
	name string
	fielderName string
}

// Value represents struct that contains fielder tag.
type Value struct {
	name string // The name of the struct.
	// The value is stored as a bit pattern alone. The boolean tells us
	// whether to interpret it as an int64 or a uint64; the only place
	// this matters is when sorting.
	// Much of the time the str field is all we need; it is printed
	// by Value.String.
	fields []Field // All fields needs to be processed
}

func (v *Value) String() string {
	return v.name
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE {
		return true
	}
	for _, spec := range decl.Specs {
		typeSpec := spec.(*ast.TypeSpec)

		structType := typeSpec.Type.(*ast.StructType)

		typeName := typeSpec.Name.Name
		if typeName != f.typeName {
			continue
		}

		v := Value{name: typeName, fields:[]Field{}}
		shouldProcess := false

		for _, field := range structType.Fields.List {
			if len(field.Names) == 0 {
				// Skip anonymous field
				continue
			}

			fieldName := field.Names[0].Name
			fieldTag := ""
			if field.Tag != nil {
				fieldTag = field.Tag.Value
			}

			fielderTargetName := reflect.StructTag(strings.Trim(fieldTag, "`")).Get(*tagName)
			fielderTargetName = strings.Split(fielderTargetName, ",")[0]

			if fielderTargetName != "" {
				shouldProcess = true
				v.fields = append(v.fields, Field{name: fieldName, fielderName: fielderTargetName})
			} else {
				// Skip field without specified tag
				continue
			}
		}

		if shouldProcess {
			f.values = append(f.values, v)
		}

	}
	return false
}

// Helpers

// usize returns the number of bits of the smallest unsigned integer
// type that will hold n. Used to create the smallest possible slice of
// integers to use as indexes into the concatenated strings.
func usize(n int) int {
	switch {
	case n < 1<<8:
		return 8
	case n < 1<<16:
		return 16
	default:
		// 2^32 is enough constants for anyone.
		return 32
	}
}

// declareIndexAndNameVars declares the index slices and concatenated names
// strings representing the runs of values.
func (g *Generator) declareIndexAndNameVars(runs [][]Value, typeName string) {
	var indexes, names []string
	for i, run := range runs {
		index, name := g.createIndexAndNameDecl(run, typeName, fmt.Sprintf("_%d", i))
		indexes = append(indexes, index)
		names = append(names, name)
	}
	g.Printf("const (\n")
	for _, name := range names {
		g.Printf("\t%s\n", name)
	}
	g.Printf(")\n\n")
	g.Printf("var (")
	for _, index := range indexes {
		g.Printf("\t%s\n", index)
	}
	g.Printf(")\n\n")
}

// declareIndexAndNameVar is the single-run version of declareIndexAndNameVars
func (g *Generator) declareIndexAndNameVar(run []Value, typeName string) {
	index, name := g.createIndexAndNameDecl(run, typeName, "")
	g.Printf("const %s\n", name)
	g.Printf("var %s\n", index)
}

// createIndexAndNameDecl returns the pair of declarations for the run. The caller will add "const" and "var".
func (g *Generator) createIndexAndNameDecl(run []Value, typeName string, suffix string) (string, string) {
	b := new(bytes.Buffer)
	indexes := make([]int, len(run))
	for i := range run {
		b.WriteString(run[i].name)
		indexes[i] = b.Len()
	}
	nameConst := fmt.Sprintf("_%s_name%s = %q", typeName, suffix, b.String())
	nameLen := b.Len()
	b.Reset()
	fmt.Fprintf(b, "_%s_index%s = [...]uint%d{0, ", typeName, suffix, usize(nameLen))
	for i, v := range indexes {
		if i > 0 {
			fmt.Fprintf(b, ", ")
		}
		fmt.Fprintf(b, "%d", v)
	}
	fmt.Fprintf(b, "}")
	return b.String(), nameConst
}

// declareNameVars declares the concatenated names string representing all the values in the runs.
func (g *Generator) declareNameVars(runs [][]Value, typeName string, suffix string) {
	g.Printf("const _%s_name%s = \"", typeName, suffix)
	for _, run := range runs {
		for i := range run {
			g.Printf("%s", run[i].name)
		}
	}
	g.Printf("\"\n")
}

// buildOneRun generates the variables and String method for a single run of contiguous values.
func (g *Generator) build(typeName string, values []Value) {
	for _, v := range values {
		// Generate fieldRefForName
		{
			caseStr := ""
			for _, field := range v.fields {
				caseStr += fmt.Sprintf(caseForFieldRefForNameTmpl, field.fielderName, field.name)
			}
			g.Printf(fieldRefForNameTmpl, v.name, caseStr)
		}

		// Generate fieldForName
		{
			caseStr := ""
			for _, field := range v.fields {
				caseStr += fmt.Sprintf(caseForFieldForNameTmpl, field.fielderName, field.name)
			}
			g.Printf(fieldForNameTmpl, v.name, caseStr)
		}

		// Generate MapForFields
		{
			caseStr := ""
			for _, field := range v.fields {
				caseStr += fmt.Sprintf(caseForMapForFieldsTmpl, field.fielderName, field.name)
			}
			g.Printf(mapForFieldsTmpl, v.name, caseStr)
		}
	}
}

// Arguments to format are:
// [1]: target field name
// [2]: struct field name
const caseForFieldRefForNameTmpl = `
	case "%[1]s":
		return &r.%[2]s, nil`

// Arguments to format are:
// [1]: type name
// [2]: cases

const fieldRefForNameTmpl = `func (r *%[1]s) FieldRefForName(fieldName string) (interface{}, error) {
	switch fieldName {
	%[2]s
	default:
		return nil, fmt.Errorf("Field: %%s not supported", fieldName)
	}
}
`

// Same as caseForFieldRefForNameTmpl
const caseForFieldForNameTmpl = `
	case "%[1]s":
		return r.%[2]s, nil`

// Same as fieldRefForNameTmpl
const fieldForNameTmpl = `func (r *%[1]s) FieldForName(fieldName string) (interface{}, error) {
	switch fieldName {
	%[2]s
	default:
		return nil, fmt.Errorf("Field: %%s not supported", fieldName)
	}
}
`

// Same as caseForFieldRefForNameTmpl
const caseForMapForFieldsTmpl = `
		case "%[1]s":
			resultMap["%[1]s"] = r.%[2]s`


// Same as fieldRefForNameTmpl
const mapForFieldsTmpl = `func (r *%[1]s) MapForFields(fieldNames []string) (map[string]interface{}, error) {
	resultMap := map[string]interface{}{}
	for _, fieldName := range fieldNames {
		switch fieldName {
		%[2]s
		default:
			return nil, fmt.Errorf("Field: %%s not supported", fieldName)
		}
	}

	return resultMap, nil
}
`